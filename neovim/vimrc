set encoding=utf-8
scriptencoding utf-8

autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
autocmd FileType python setl tabstop=8 expandtab shiftwidth=2 softtabstop=2
autocmd BufWritePre * :%s/\s\+$//ge

" NeoBundle ----------------------------------------
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/

  if !isdirectory(expand("~/.vim/bundle/neobundle.vim/"))
    echo "install NeoBundle..."
    :call system("git clone git://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim")
  endif
endif

call neobundle#begin(expand('~/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

" 追加したいVimプラグインを記述
NeoBundle 'vim-scripts/gtags.vim'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'ntpeters/vim-better-whitespace'
NeoBundle 'Yggdroot/indentline'
NeoBundle 'nachumk/systemverilog.vim'
NeoBundle 'tyru/open-browser.vim'
NeoBundle 'junegunn/vim-easy-align'
NeoBundle 'haya14busa/vim-migemo'
NeoBundle 'szw/vim-tags'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'gmist/vim-palette'
NeoBundle 'ConradIrwin/vim-bracketed-paste'
NeoBundle 'github/copilot.vim'
if has('lua')
  NeoBundle 'Shougo/neocomplete.vim'
  NeoBundle 'Shougo/neosnippet'
  NeoBundle 'Shougo/neosnippet-snippets'
endif
call neobundle#end()

" ファイルタイプ別のVimプラグイン/インデントを有効にする
filetype plugin indent on

" 未インストールのプラグインがある場合に質問する
NeoBundleCheck
" ----------------------------------------------------

" neocomplete / neosnippet----------------------------
if neobundle#is_installed('neocomplete.vim')
    " Vim起動時にneocompleteを有効にする
    let g:neocomplete#enable_at_startup = 1
    " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
    let g:neocomplete#enable_smart_case = 1
    " 3文字以上の単語に対して補完を有効にする
    let g:neocomplete#min_keyword_length = 3
    " 区切り文字まで補完する
    let g:neocomplete#enable_auto_delimiter = 1
    " 1文字目の入力から補完のポップアップを表示
    let g:neocomplete#auto_completion_start_length = 1
    " バックスペースで補完のポップアップを閉じる
    inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"

    " エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定・・・・・・②
    imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
    " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ・・・・・・③
    imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
endif

" vim-better-whitespace の設定:
"   特定のファイルで末尾の空白の削除を無効
let g:better_whitespace_filetypes_blacklist=['markdown']

" python linter
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_python_flake8_args = '--ignore=E501'

" カラースキームの設定
syntax on
colorscheme brogrammer
set t_Co=256
set background=dark

" setting
" syntax higilighting の1行あたりの最大解析文字数を200に制限
set synmaxcol=200
" バックアップファイルを作らない
set nobackup
" スワップファイルを作らない
set noswapfile
" 編集中のファイルが変更されたら自動で読み直す
set autoread
" バッファが編集中でもその他のファイルを開けるように
set hidden
" 入力中のコマンドをステータスに表示する
set showcmd
" ヤンクした内容をクリップボードにコピー
set clipboard+=unnamed
lang en_US.UTF-8
" Backspace で改行も削除できるように
set backspace=2
" viminfo ファイルの出力先を変更
set viminfo=
" undo file (.un~) の作成を無効化
set noundofile

" 見た目系
" 行番号を表示
set number
" 現在の行を強調表示
set cursorline
" 現在の行を強調表示（縦）
set cursorcolumn
" 行末の1文字先までカーソルを移動できるように
set virtualedit=onemore
" インデントはスマートインデント
set smartindent
" ビープ音を可視化
set visualbell
" 括弧入力時の対応する括弧を表示
set showmatch
" ステータスラインを常に表示
set laststatus=2
" コマンドラインの補完
set wildmode=list:longest
" 折り返し時に表示行単位での移動できるようにする
nnoremap j gj
nnoremap k gk

" Tab系
" 不可視文字を可視化(タブが「▸-」と表示される)
set list listchars=tab:\▸\-
" Tab文字を半角スペースにする
set expandtab
" 行頭以外のTab文字の表示幅（スペースいくつ分）
set tabstop=2
" 行頭でのTab文字の表示幅
set shiftwidth=2

" 検索系
" 検索文字列が小文字の場合は大文字小文字を区別なく検索する
set ignorecase
" 検索文字列に大文字が含まれている場合は区別して検索する
set smartcase
" 検索文字列入力時に順次対象文字列にヒットさせる
set incsearch
" 検索時に最後まで行ったら最初に戻る
set wrapscan
" 検索語をハイライト表示
set hlsearch
" ESC連打でハイライト解除
nmap <Esc><Esc> :nohlsearch<CR><Esc>

" ESCでIMEをオフにする
function! ImeInActivate()
  call system('fcitx-remote -c')
endfunction
inoremap <silent> <C-[> <ESC>:call ImeInActivate()<CR>

" 矢印キーでABCDが入力されるのを抑制
imap OA <Up>
imap OB <Down>
imap OC <Right>
imap OD <Left>

" vim-easy-align のキーバインド
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" gtags のキーバインド
map <C-g> :Gtags
map <C-h> :Gtags -f %<CR>
map <C-f> :GtagsCursor<CR>
map <C-j> :cn<CR>
map <C-k> :cp<CR>


" 補完の選択中に挿入を実行しない
" 補完が表示された際は1件目を選択状態にする
set completeopt=menuone,noinsert

" 補完表示時のEnterで改行をしない
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"

" 補完候補の選択を C-p, C-n で可能にする
inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"
